import os
import sys
import operator
from typing import List, Optional, Annotated
from pydantic import BaseModel, Field
from typing import Literal
from langgraph.graph import MessagesState
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../")))

language_list = ["English", "Danish", "German", "French", "Italian", "Spanish", "Swedish", "Norwegian", "Dutch", "Portuguese", "Russian", "Chinese", "Japanese", "Korean"]
    

class InputState(MessagesState):
    """Input state is only 'messages'."""

class AgentState(MessagesState):
    """Main agent state containing messages and research data."""



class Examiner(BaseModel):
    name: str = Field(
        default="",
        description="Name of the examiner."
    )
    age: int = Field(
        default=0,
        description="Age of the examiner."
    )
    professional: str = Field(
        default="",
        description="Professional background of the examiner."
    )
    personal: str = Field(
        default="",
        description="Personal background of the examiner."
    )
    communication: str = Field(
        default="",
        description="Communication style of the examiner."
    )
    
    @property
    def persona(self) -> str:
        return f"Name: {self.name}\nAge: {self.age}\nProfessional: {self.professional}\nPersonal: {self.personal}\nCommunication: {self.communication}\n"

class FeedbackOnExaminer(Examiner):
    human_feedback: str = Field(
        description="Human feedback on the examiner."
    )

class Perspectives(BaseModel):
    examiner: Examiner = Field(
        description="Comprehensive list of examiners with their personal information."
    )

class ExaminersState(BaseModel):
    thesis_title: Optional[str] = Field(
        default="",
        description="Title of the thesis."
    )
    language: Literal[*language_list] = Field(
        description="Language to be used in the thesis and during defense."
    )
    user_inputs: List[str] = Field(
        default_factory=list,
        description="User inputs to generate examiners."
    )
    max_examiners: Optional[int] = Field(
        default=2,
        description="Maximum number of examiners. Applicable only if user doesn't provide user_inputs."
    )
    examiners: Annotated[List[Examiner], operator.add] = Field(
        default_factory=list,
        description="Comprehensive list of examiners with their personal information."
    )

class ExaminersOutput(BaseModel):
    examiners: Annotated[List[Examiner], operator.add] = Field(
        default_factory=list,
        description="Comprehensive list of examiners with their personal information."
    )

class ExaminerState(BaseModel):
    user_input: str = Field(
        description="User input to generate examiner."
    )
    language: Literal[*language_list] = Field(
        description="Language to be used in the thesis and during defense."
    )
    human_feedback: Optional[str] = Field(
        default="",
        description="Human feedback on the examiner."
    )
    examiner: Optional[Examiner] = Field(
        default_factory=Examiner,
        description="Examiner generated by the model."
    )