import os
import sys
from operator import add
from typing import List, Optional, Annotated, Literal
from pydantic import BaseModel, Field
from langchain_chroma import Chroma
from langgraph.graph import MessagesState
from langchain_core.documents import Document
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../")))

language_list = ["English", "Danish", "German", "French", "Italian", "Spanish", "Swedish", "Norwegian", "Dutch", "Portuguese", "Russian", "Chinese", "Japanese", "Korean"]


def reduce_language_values(existing: str, new_value: str) -> str:
    return new_value

#### Presentation Graph ####
class PresentationState(BaseModel):
    script: str = Field(
        default="",
        description="Script for the presentation."
    )
    outline: str = Field(
        default="",
        description="Outline for the slides."
    )
    language: Annotated[Literal[*language_list], reduce_language_values] = Field(
        description="Language to be used in the interview."
    )
    max_time: int = Field(
        description="Maximum time for the presentation, in minutes."
    )
    store_id: str = Field(
        description="Collection name of the vector database."
    )
    thesis_path: str = Field(
        description="Path to the thesis document."
    )
    
#### Examiner Graph ####
class Examiner(BaseModel):
    name: str = Field(
        default="",
        description="Name of the examiner."
    )
    age: int = Field(
        default=0,
        description="Age of the examiner."
    )
    professional: str = Field(
        default="",
        description="Professional background of the examiner."
    )
    personal: str = Field(
        default="",
        description="Personal background of the examiner."
    )
    communication: str = Field(
        default="",
        description="Communication style of the examiner."
    )
    
    @property
    def persona(self) -> str:
        return f"Name: {self.name}\nAge: {self.age}\nProfessional: {self.professional}\nPersonal: {self.personal}\nCommunication: {self.communication}\n"

class ExaminersState(BaseModel):
    thesis_title: Optional[str] = Field(
        description="Title of the thesis."
    )
    language: Annotated[Literal[*language_list], reduce_language_values] = Field(
        description="Language to be used in the interview."
    )
    user_inputs: List[str] = Field(
        description="User inputs to generate examiners."
    )
    max_examiners: Optional[int] = Field(
        description="Maximum number of examiners. Applicable only if user doesn't provide user_inputs."
    )
    examiners: Annotated[List[Examiner], add] = Field(
        default_factory=list,
        description="Comprehensive list of examiners with their personal information."
    )


class ExaminerState(BaseModel):
    user_input: str = Field(
        description="User input to generate examiner."
    )
    language: Annotated[Literal[*language_list], reduce_language_values] = Field(
        description="Language to be used in the interview."
    )
    human_feedback: Optional[str] = Field(
        default="",
        description="Human feedback on the examiner."
    )
    examiner: Optional[Examiner] = Field(
        default_factory=Examiner,
        description="Examiner generated by the model."
    )

#### Interview Graph ####
class QueryState(BaseModel):
    name: str = Field(
        description="Who asked the question."
    )
    query: str = Field(
        description="Query/Question to be answered."
    )
    documents: Annotated[List[Document], add] = Field(
        default_factory=list,
        description="Documents retrieved from the vector database."
    )
    answer: str = Field(
        default="",
        description="Answer to the query."
    )
    store_id: str = Field(
        description="Collection name of the vector database."
    )
    language: Annotated[Literal[*language_list], reduce_language_values] = Field(
        description="Language to be used in the interview."
    )

    @property
    def qa(self):
        return f"Questioner: {self.name}\nQuestion: {self.query}\nAnswer: {self.answer}"



class InterviewState(BaseModel):
    
    max_questions: int = Field(
        description="Maximum number of questions from a examiner."
    )
    language: Annotated[Literal[*language_list], reduce_language_values] = Field(
        description="Language to be used in the interview."
    )
    script: str = Field(
        description="Script addressed from the candidate."
    )
    examiners: Annotated[List[Examiner], add] = Field(
        description="Comprehensive list of examiners with their personal information."
    )
    question_sets: Annotated[List[dict], add] = Field(
        default_factory=list,
        description="List of questions sets from each examiner, each question set is a dictionary with a key 'question' and a key 'questioner'"
    )
    query_results: Annotated[List[QueryState], add] = Field(
        default_factory=list,
        description="List of questions and answers."
    )
    store_id: str = Field(
        description="Collection name of the vector database."
    )


class GraphState(BaseModel):
    thesis_title: Optional[str] = Field(
        default="",
        description="Title of the thesis."
    )
    language: Annotated[Literal[*language_list], reduce_language_values] = Field(
        default="Danish",
        description="Language to be used in the thesis and during defense."
    )
    user_inputs: List[str] = Field(
        default_factory=list,
        description="User inputs to generate examiners."
    )
    max_examiners: Optional[int] = Field(
        default=2,
        description="Maximum number of examiners. Applicable only if user doesn't provide user_inputs."
    )
    thesis_path: str = Field(
        default="data/Master_Zhang.pdf",
        description="Path to the thesis document."
    )
    store_id: str = Field(
        default="Zhang",
        description="Collection name of the vector database."
    )
    max_questions: int = Field(
        default=5,
        description="Maximum number of questions from a examiner."
    )
    max_time: int = Field(
        default=15,
        description="Maximum time for the presentation, in minutes."
    )
    script: str = Field(
        default="",
        description="Script for the presentation."
    )
    outline: str = Field(
        default="",
        description="Outline for the slides."
    )
    examiners: Annotated[List[Examiner], add] = Field(
        default_factory=list,
        description="Comprehensive list of examiners with their personal information."
    )
    query_results: Annotated[List[QueryState], add] = Field(
        default_factory=list,
        description="List of questions and answers."
    )
    question_sets: Annotated[List[dict], add] = Field(
        default_factory=list,
        description="List of questions sets from each examiner, each question set is a dictionary with a key 'question' and a key 'questioner'"
    )
    

class OutputState(BaseModel):
    report: str = Field(
        default="",
        description="Report for the defense."
    )
    QA: str = Field(
        default="",
        description="QA for the defense."
    )